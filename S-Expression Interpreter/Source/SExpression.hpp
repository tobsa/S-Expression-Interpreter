////////////////////////////////////////////////////////////////////////////////
// SExpression.hpp
////////////////////////////////////////////////////////////////////////////////
#ifndef SEXPRESSION_HPP
#define SEXPRESSION_HPP

////////////////////////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////////////////////////
#include <string>
#include <map>

////////////////////////////////////////////////////////////////////////////////
// Defines an s-expression
////////////////////////////////////////////////////////////////////////////////
class SExpression
{
public:

	////////////////////////////////////////////////////////////////////////////////
	// Public enums
	////////////////////////////////////////////////////////////////////////////////
	enum Type { Number, Atom, DottedPair, Nil };

	////////////////////////////////////////////////////////////////////////////////
	// Public typdefs
	////////////////////////////////////////////////////////////////////////////////
	typedef SExpression*                          SExpressionPtr;
	typedef std::map<std::string,SExpressionPtr>  VariableMap;
	typedef std::pair<std::string,SExpressionPtr> VariablePair; 

public:
	
	////////////////////////////////////////////////////////////////////////////////
	// Create an empty s-expression
	////////////////////////////////////////////////////////////////////////////////
	SExpression();

	////////////////////////////////////////////////////////////////////////////////
	// Construct a s-expression containing a number
	////////////////////////////////////////////////////////////////////////////////
	SExpression(int number);

	////////////////////////////////////////////////////////////////////////////////
	// Construct a s-expression containing an atom
	////////////////////////////////////////////////////////////////////////////////
	SExpression(const std::string& atom);

	////////////////////////////////////////////////////////////////////////////////
	// Construct a s-expression containing a dotted pair
	////////////////////////////////////////////////////////////////////////////////
	SExpression(SExpressionPtr car,SExpressionPtr cdr);

	////////////////////////////////////////////////////////////////////////////////
	// Get the number
	////////////////////////////////////////////////////////////////////////////////
	int getNumber() const;

	////////////////////////////////////////////////////////////////////////////////
	// Get the atom
	////////////////////////////////////////////////////////////////////////////////
	const std::string& getAtom() const;

	////////////////////////////////////////////////////////////////////////////////
	// Get the car-part of the dotted pair
	////////////////////////////////////////////////////////////////////////////////
	SExpressionPtr getCar() const;

	////////////////////////////////////////////////////////////////////////////////
	// Get the cdr-part of the dotted pair
	////////////////////////////////////////////////////////////////////////////////
	SExpressionPtr getCdr() const;

	////////////////////////////////////////////////////////////////////////////////
	// Get the type of the s-expression
	////////////////////////////////////////////////////////////////////////////////
	Type getType() const;

	////////////////////////////////////////////////////////////////////////////////
	// Convert a string to an integer
	////////////////////////////////////////////////////////////////////////////////
	static int stringToInteger(const std::string& str);

	////////////////////////////////////////////////////////////////////////////////
	// Convert a string to an atom
	////////////////////////////////////////////////////////////////////////////////
	static SExpressionPtr stringToAtom(const std::string& token);

private:

	////////////////////////////////////////////////////////////////////////////////
	// Private member data
	////////////////////////////////////////////////////////////////////////////////
	Type            m_type;
	int             m_number;
	std::string     m_atom;
	SExpressionPtr  m_car;
	SExpressionPtr  m_cdr;

	////////////////////////////////////////////////////////////////////////////////
	// Private static data
	////////////////////////////////////////////////////////////////////////////////
	static VariableMap m_variables;
};

#endif