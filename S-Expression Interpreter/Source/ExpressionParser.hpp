////////////////////////////////////////////////////////////////////////////////
// ExpressionParser.hpp
////////////////////////////////////////////////////////////////////////////////
#ifndef EXPRESSION_PARSER_HPP
#define EXPRESSION_PARSER_HPP

////////////////////////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////////////////////////
#include "SExpression.hpp"

////////////////////////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////////////////////////
class Scanner;

////////////////////////////////////////////////////////////////////////////////
// Expression parser
////////////////////////////////////////////////////////////////////////////////
class ExpressionParser
{
private:

	////////////////////////////////////////////////////////////////////////////////
	// Private typedefs
	////////////////////////////////////////////////////////////////////////////////
	typedef SExpression::SExpressionPtr SExpressionPtr;

public:

	////////////////////////////////////////////////////////////////////////////////
	// Parse an expression into a s-expression
	////////////////////////////////////////////////////////////////////////////////
	static SExpressionPtr parse(const std::string& line);

private:
	
	////////////////////////////////////////////////////////////////////////////////
	// Read the next expression - takes the operator precedence into account
	////////////////////////////////////////////////////////////////////////////////
	static SExpressionPtr readExpression(Scanner& scanner, int precedence);

	////////////////////////////////////////////////////////////////////////////////
	// Read the next term
	////////////////////////////////////////////////////////////////////////////////
	static SExpressionPtr readTerm(Scanner& scanner);

	////////////////////////////////////////////////////////////////////////////////
	// Get the precedence of the token
	////////////////////////////////////////////////////////////////////////////////
	static int getPrecedence(const std::string& token);
};

#endif