////////////////////////////////////////////////////////////////////////////////
// Evaluator.hpp
////////////////////////////////////////////////////////////////////////////////
#ifndef EVALUATOR_HPP
#define EVALUATOR_HPP

////////////////////////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////////////////////////
#include "SExpression.hpp"
#include <map>

////////////////////////////////////////////////////////////////////////////////
// Evaluates an s-expression
////////////////////////////////////////////////////////////////////////////////
class Evaluator
{
private:

	////////////////////////////////////////////////////////////////////////////////
	// Private typedefs
	////////////////////////////////////////////////////////////////////////////////
	typedef SExpression::SExpressionPtr SExpressionPtr;
	typedef std::map<std::string,int>   VariableMap;
	typedef std::pair<std::string,int>  VariablePair;

public:

	////////////////////////////////////////////////////////////////////////////////
	// Evaluates an s-expression
	////////////////////////////////////////////////////////////////////////////////
	static int evaluate(SExpressionPtr sx);

private:

	////////////////////////////////////////////////////////////////////////////////
	// Convert an atom to an integer
	////////////////////////////////////////////////////////////////////////////////
	static int atomToInteger(const std::string& atom);

	////////////////////////////////////////////////////////////////////////////////
	// Evaluates a dotted pair
	////////////////////////////////////////////////////////////////////////////////
	static int evaluateDottedPair(SExpressionPtr sx);

	////////////////////////////////////////////////////////////////////////////////
	// Check if the token is an operator
	////////////////////////////////////////////////////////////////////////////////
	static bool isOperator(const std::string& token);

	////////////////////////////////////////////////////////////////////////////////
	// Get the power of lhs by rhs (lhs^rhs)
	////////////////////////////////////////////////////////////////////////////////
	static int power(int lhs,int rhs);

private:

	////////////////////////////////////////////////////////////////////////////////
	// Static private data
	////////////////////////////////////////////////////////////////////////////////
	static VariableMap m_variables;
};


#endif