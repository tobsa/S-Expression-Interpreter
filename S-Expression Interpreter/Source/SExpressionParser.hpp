////////////////////////////////////////////////////////////////////////////////
// SExpressionParser.hpp
////////////////////////////////////////////////////////////////////////////////
#ifndef SEXPRESSION_PARSER_HPP
#define SEXPRESSION_PARSER_HPP

////////////////////////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////////////////////////
#include "SExpression.hpp"

////////////////////////////////////////////////////////////////////////////////
// Forward declarations
////////////////////////////////////////////////////////////////////////////////
class Scanner;

////////////////////////////////////////////////////////////////////////////////
// An s-expression parser
////////////////////////////////////////////////////////////////////////////////
class SExpressionParser
{
private:

	////////////////////////////////////////////////////////////////////////////////
	// Private typedefs
	////////////////////////////////////////////////////////////////////////////////
	typedef SExpression::SExpressionPtr SExpressionPtr;

public:

	////////////////////////////////////////////////////////////////////////////////
	// Parse an s-expression
	////////////////////////////////////////////////////////////////////////////////
	static SExpressionPtr parse(const std::string& line);

	////////////////////////////////////////////////////////////////////////////////
	// Print out a s-expression
	////////////////////////////////////////////////////////////////////////////////
	static void print(SExpressionPtr sx);

private:
	
	////////////////////////////////////////////////////////////////////////////////
	// Private static functions
	////////////////////////////////////////////////////////////////////////////////
	static SExpressionPtr readSExpression(Scanner& scanner);
	static SExpressionPtr readTerm(Scanner& scanner);
	static void printSExpression(SExpressionPtr sx);
		
private:

	////////////////////////////////////////////////////////////////////////////////
	// Private static data
	////////////////////////////////////////////////////////////////////////////////
	static bool m_openParantheses;
	static int  m_numParantheses;
};

#endif